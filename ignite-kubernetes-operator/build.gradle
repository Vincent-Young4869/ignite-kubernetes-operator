plugins {
}

dependencies {
    implementation project(":ignite-kubernetes-operator-api")

    implementation 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/io.javaoperatorsdk/operator-framework-spring-boot-starter
    implementation 'io.javaoperatorsdk:operator-framework-spring-boot-starter:5.5.0'
    // https://mvnrepository.com/artifact/org.springframework.retry/spring-retry
    implementation 'org.springframework.retry:spring-retry:2.0.9'
    // https://mvnrepository.com/artifact/org.springframework/spring-aspects
    implementation 'org.springframework:spring-aspects:6.1.13'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

/************* Dockerization Related ******************/
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import java.nio.file.Paths

loadConfiguration()

def loadConfiguration() {
    def imgRegistry = hasProperty('imgRegistry') ? imgRegistry : 'personal_dockerhub'
    if (!['personal_dockerhub', 'public_registry'].contains(imgRegistry)) {
        System.err.println("Please set -PimgRegistry to personal_dockerhub, or public_registry")
        System.exit(1)
    }

    def configFile = file('gradle-properties.groovy')
    def config = new ConfigSlurper(imgRegistry).parse(configFile.toURI().toURL())
    ext.setProperty("config", config)

    def projectName = project.name
    ext.setProperty("projectName", projectName)

    def projectVersion = semver.version
    ext.setProperty("projectVersion", projectVersion)
    ext.setProperty("imageTag", projectVersion)

    def jarFileName = "${projectName}-${projectVersion}.jar"
    ext.setProperty("jarFileName", jarFileName)

    def jarArchivePath = "$buildDir/libs/$jarFileName"
    ext.setProperty("jarArchivePath", jarArchivePath)
}

tasks.register('dockerLogin') {
    doLast {
        def dockerUsername = System.getenv('DOCKER_USERNAME')
        def dockerPassword = System.getenv('DOCKER_PASSWORD')

        if (dockerUsername && dockerPassword) {
            exec {
                commandLine 'docker', 'login', '-u', dockerUsername, '--password-stdin'
                standardInput = new ByteArrayInputStream(dockerPassword.bytes)
            }
        } else {
            throw new GradleException("Environment variables DOCKER_USERNAME and DOCKER_PASSWORD must be set")
        }
    }
}

bootJar {
    archiveFileName.set("$projectName-$projectVersion.${archiveExtension.get()}")
}

tasks.register('assembleDocker', Copy) {
    dependsOn build
    from jarArchivePath
    into Paths.get(buildDir as String, 'docker')
}

//https://bmuschko.github.io/gradle-docker-plugin/
tasks.register('createDockerfile', Dockerfile) {
    destFile.set(new File(assembleDocker.destinationDir as String, 'Dockerfile'))
    def workingDirPath = "/opt/$rootProject.name"
    def jarFullName = "$workingDirPath/${jarFileName}"
    from 'vincentyoung4869/ubuntu:23.10-jdk17'
    runCommand('''DEBIAN_FRONTEND=noninteractive apt-get update \\
                    && apt-get -y --no-install-recommends install tzdata \\
                    && apt-get clean \\
                    && rm -rf /var/lib/apt/lists/*''')

    runCommand('useradd -u 11000 ignite_operator --create-home')
    user('ignite_operator')

    volume('/tmp')
    workingDir(workingDirPath)
    copyFile(new Dockerfile.CopyFile(jarFileName, jarFullName).withChown("ignite_operator:ignite_operator"))

    exposePort(config.docker_expose_port)
    entryPoint('java', '-jar', jarFullName)
}

//https://bmuschko.github.io/gradle-docker-plugin/
tasks.register('buildImage', DockerBuildImage) {
    dependsOn assembleDocker
    dependsOn createDockerfile
    dependsOn dockerLogin

    inputDir.set(assembleDocker.destinationDir)
    noCache.set(true)
    images.set(["$config.dockerhub_name/$projectName:$imageTag"])
}

tasks.register('pushImage', DockerPushImage) {
    dependsOn buildImage
    images.set(["$config.dockerhub_name/$projectName:$imageTag"])
}